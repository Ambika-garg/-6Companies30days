// Water jug problem BFS
#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> pii;

void printpath(map<pii,pii> &mp, pii u)
{
    if(u.first==0 and u.second==0){
        cout<<u.first<<" "<<u.second<<endl;
        return;
    }
    printpath(mp, mp[u]);
    cout<<u.first<<" "<<u.second<<endl;
}

void BFS(int a, int b, int target){
    queue<pii> q;
    map<pii, int> vis;
    map<pii,pii> mp;
    q.push({0,0});
    bool Solvable = false;
    
    while(!q.empty()){
        
        auto u = q.front();
        q.pop();
        if(vis[u]==1){
            continue;
        }
        if(u.first<0 || u.second<0 || u.first>a || u.second>b){
            continue;
        }
        vis[u]=1;
        
        //if final state
        if(u.first==target or u.second==target){
            Solvable=true;
            printpath(mp, u);
            if (u.first == target)
            {
              if (u.second != 0)
                  cout<<u.first<<" "<<0<<endl;
            }
            else 
            {
              if (u.first != 0)
                  cout<<0<<" "<<u.second<<endl;
            }
              return;
        }
        
        //else iterate through all intermediate states
        
        //1. completly fill jug2
        if(vis[{u.first,b}]!=1)
        {
            q.push({u.first,b});
            mp[{u.first,b}]=u;
        }
        else if(vis[{a,u.second}]!=1){
            q.push({a,u.second});
            mp[{a,u.second}]=u;
        }
        
        //2. empty jug1 and ju2
        if(vis[{u.first, 0}]!=1){
            q.push({u.first,0});
            mp[{u.first,0}]=u;
        }
        if(vis[{0,u.second}]!=1){
            q.push({0,u.second});
            mp[{0,u.second}]=u;
        }
        
        //3. empty jug1 into jug2
        int d = a-u.first;
        if(u.second>=d){
            int c = u.second-d;
            if(vis[{a,c}]!=1){
                q.push({a,c});
                mp[{a,c}]=u;
            }
        }
        else
        {
            int c = u.first+u.second;
            if(vis[{c,0}]!=1){
                q.push({c,0});
                mp[{c,0}]=u;
            }
        }
        
        d = b-u.second;
        if(u.first >= d)
         {
            int c = u.first - d;
            if(vis[{c,b}]!=1)
              {q.push({c,b});
              mp[{c,b}]=u;}
         }
        else
        {
            int c = u.first+u.second;
            if(vis[{0,c}]!=1){
                q.push({0,c});
                mp[{0,c}]=u;
            }
        }
        
    }
    if(Solvable==false){
        cout<<"not Solvable";
    }
    return;
    
}

int main(){
    int a=5;
    int b = 7;
    int target=3;
    
    BFS(a,b,target);
}
